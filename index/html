<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Terminal Monitoring System - Direct Debit Georgia</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }

        .content {
            padding: 40px;
        }

        .form-section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            border: 1px solid #e9ecef;
        }

        .form-section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.5em;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #495057;
        }

        input, textarea, select {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        textarea {
            resize: vertical;
            min-height: 100px;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
        }

        .btn-success {
            background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
        }

        .terminals-section {
            background: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
        }

        .terminals-section h2 {
            background: #2c3e50;
            color: white;
            padding: 20px 30px;
            margin: 0;
            font-size: 1.5em;
        }

        .terminal-card {
            padding: 25px;
            border-bottom: 1px solid #e9ecef;
            transition: background-color 0.3s ease;
        }

        .terminal-card:hover {
            background-color: #f8f9fa;
        }

        .terminal-card:last-child {
            border-bottom: none;
        }

        .terminal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .terminal-ip {
            font-size: 1.3em;
            font-weight: 700;
            color: #2c3e50;
        }

        .terminal-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 600;
        }

        .status-stopped {
            background: #fee;
            color: #c53030;
        }

        .status-resolved {
            background: #f0fff4;
            color: #38a169;
        }

        .terminal-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 15px;
        }

        .info-item {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .info-label {
            font-size: 0.9em;
            color: #6c757d;
            margin-bottom: 5px;
        }

        .info-value {
            font-weight: 600;
            color: #495057;
        }

        .terminal-problem {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .problem-label {
            font-size: 0.9em;
            color: #856404;
            margin-bottom: 5px;
            font-weight: 600;
        }

        .problem-text {
            color: #856404;
            line-height: 1.5;
        }

        .terminal-actions {
            display: flex;
            gap: 10px;
        }

        .btn-sm {
            padding: 8px 16px;
            font-size: 14px;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            padding: 25px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            border: 1px solid #e9ecef;
        }

        .stat-number {
            font-size: 2.5em;
            font-weight: 700;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .stat-label {
            color: #6c757d;
            font-size: 1.1em;
        }

        .filter-section {
            background: #e9ecef;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .filter-group {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .filter-group select {
            max-width: 200px;
        }

        .no-terminals {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
            font-size: 1.1em;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }

        .success {
            background: #d4edda;
            color: #155724;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
        }

        .export-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .export-section h3 {
            color: #2c3e50;
            margin-bottom: 15px;
        }

        .export-buttons {
            display: flex;
            gap: 10px;
        }

        @media (max-width: 768px) {
            .terminal-info {
                grid-template-columns: 1fr;
            }
            
            .terminal-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
            
            .terminal-actions {
                flex-direction: column;
            }
            
            .filter-group {
                flex-direction: column;
                align-items: stretch;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Terminal Monitoring System</h1>
            <p>Direct Debit Georgia - Track stopped terminals and maintenance</p>
        </div>

        <div class="content">
            <div id="message"></div>

            <!-- Statistics -->
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number" id="totalTerminals">0</div>
                    <div class="stat-label">Total Terminals</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="stoppedTerminals">0</div>
                    <div class="stat-label">Currently Stopped</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="resolvedTerminals">0</div>
                    <div class="stat-label">Resolved</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="overdueTerminals">0</div>
                    <div class="stat-label">Overdue (3+ days)</div>
                </div>
            </div>

            <!-- Add Terminal Form -->
            <div class="form-section">
                <h2>Add Stopped Terminal</h2>
                <div class="form-group">
                    <label for="terminalIp">Terminal IP Address</label>
                    <input type="text" id="terminalIp" placeholder="e.g., 192.168.1.100" required>
                </div>
                <div class="form-group">
                    <label for="terminalLocation">Location (Optional)</label>
                    <input type="text" id="terminalLocation" placeholder="e.g., Branch Office, Main Hall">
                </div>
                <div class="form-group">
                    <label for="problemDescription">Problem Description</label>
                    <textarea id="problemDescription" placeholder="Describe the issue that required stopping the terminal..." required></textarea>
                </div>
                <button class="btn" id="addBtn" onclick="addTerminal()">Add Terminal</button>
            </div>

            <!-- Export Section -->
            <div class="export-section">
                <h3>Export Data</h3>
                <div class="export-buttons">
                    <button class="btn btn-success" onclick="exportToCSV()">Export to CSV</button>
                    <button class="btn" onclick="exportToJSON()">Export to JSON</button>
                    <button class="btn btn-danger" onclick="clearAllData()">Clear All Data</button>
                </div>
            </div>

            <!-- Filter Section -->
            <div class="filter-section">
                <div class="filter-group">
                    <label for="statusFilter">Filter by Status:</label>
                    <select id="statusFilter" onchange="filterTerminals()">
                        <option value="all">All Terminals</option>
                        <option value="stopped">Stopped Only</option>
                        <option value="resolved">Resolved Only</option>
                        <option value="overdue">Overdue (3+ days)</option>
                    </select>
                </div>
            </div>

            <!-- Terminals List -->
            <div class="terminals-section">
                <h2>Terminal Status</h2>
                <div id="terminalsContainer">
                    <div class="loading">Loading terminals...</div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Terminal data storage - using localStorage for persistence
        let terminals = [];
        let terminalIdCounter = 1;

        // Initialize the application
        window.addEventListener('load', function() {
            loadTerminals();
            updateStats();
            renderTerminals();
        });

        // Load terminals from localStorage
        function loadTerminals() {
            try {
                const saved = localStorage.getItem('ddg_terminals');
                if (saved) {
                    const data = JSON.parse(saved);
                    terminals = data.terminals || [];
                    terminalIdCounter = data.counter || 1;
                    
                    // Convert date strings back to Date objects
                    terminals.forEach(terminal => {
                        terminal.stoppedDate = new Date(terminal.stoppedDate);
                        if (terminal.resolvedDate) {
                            terminal.resolvedDate = new Date(terminal.resolvedDate);
                        }
                    });
                }
            } catch (e) {
                console.error('Error loading terminals:', e);
                showMessage('Error loading saved data', 'error');
            }
        }

        // Save terminals to localStorage
        function saveTerminals() {
            try {
                const data = {
                    terminals: terminals,
                    counter: terminalIdCounter,
                    lastUpdated: new Date().toISOString()
                };
                localStorage.setItem('ddg_terminals', JSON.stringify(data));
                showMessage('Data saved successfully!', 'success');
            } catch (e) {
                console.error('Error saving terminals:', e);
                showMessage('Error saving data', 'error');
            }
        }

        function addTerminal() {
            const ip = document.getElementById('terminalIp').value.trim();
            const location = document.getElementById('terminalLocation').value.trim();
            const problem = document.getElementById('problemDescription').value.trim();

            if (!ip || !problem) {
                showMessage('Please fill in IP address and problem description', 'error');
                return;
            }

            // Check if IP already exists in stopped terminals
            if (terminals.some(terminal => terminal.ip === ip && terminal.status === 'stopped')) {
                showMessage('This IP address is already in the stopped terminals list', 'error');
                return;
            }

            const terminal = {
                id: terminalIdCounter++,
                ip: ip,
                location: location,
                problem: problem,
                stoppedDate: new Date(),
                status: 'stopped',
                resolvedDate: null
            };

            terminals.push(terminal);
            saveTerminals();
            updateStats();
            renderTerminals();
            clearForm();
        }

        function resolveTerminal(id) {
            const terminal = terminals.find(t => t.id === id);
            if (terminal) {
                terminal.status = 'resolved';
                terminal.resolvedDate = new Date();
                saveTerminals();
                updateStats();
                renderTerminals();
            }
        }

        function deleteTerminal(id) {
            if (confirm('Are you sure you want to delete this terminal record?')) {
                terminals = terminals.filter(t => t.id !== id);
                saveTerminals();
                updateStats();
                renderTerminals();
            }
        }

        function clearAllData() {
            if (confirm('Are you sure you want to clear ALL terminal data? This cannot be undone!')) {
                terminals = [];
                terminalIdCounter = 1;
                localStorage.removeItem('ddg_terminals');
                updateStats();
                renderTerminals();
                showMessage('All data cleared successfully', 'success');
            }
        }

        function exportToCSV() {
            if (terminals.length === 0) {
                showMessage('No data to export', 'error');
                return;
            }

            const headers = ['IP Address', 'Location', 'Problem', 'Stopped Date', 'Status', 'Resolved Date', 'Days Stopped'];
            const rows = terminals.map(terminal => {
                const daysStopped = Math.floor((new Date() - terminal.stoppedDate) / (1000 * 60 * 60 * 24));
                return [
                    terminal.ip,
                    terminal.location || '',
                    terminal.problem.replace(/,/g, ';'), // Replace commas to avoid CSV issues
                    terminal.stoppedDate.toLocaleDateString(),
                    terminal.status,
                    terminal.resolvedDate ? terminal.resolvedDate.toLocaleDateString() : '',
                    daysStopped
                ];
            });

            const csvContent = [headers, ...rows].map(row => row.join(',')).join('\n');
            downloadFile(csvContent, 'terminals_report.csv', 'text/csv');
            showMessage('CSV exported successfully!', 'success');
        }

        function exportToJSON() {
            if (terminals.length === 0) {
                showMessage('No data to export', 'error');
                return;
            }

            const jsonContent = JSON.stringify(terminals, null, 2);
            downloadFile(jsonContent, 'terminals_report.json', 'application/json');
            showMessage('JSON exported successfully!', 'success');
        }

        function downloadFile(content, filename, mimeType) {
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function filterTerminals() {
            const filter = document.getElementById('statusFilter').value;
            renderTerminals(filter);
        }

        function renderTerminals(filter = 'all') {
            const container = document.getElementById('terminalsContainer');
            
            let filteredTerminals = terminals;
            
            if (filter === 'stopped') {
                filteredTerminals = terminals.filter(t => t.status === 'stopped');
            } else if (filter === 'resolved') {
                filteredTerminals = terminals.filter(t => t.status === 'resolved');
            } else if (filter === 'overdue') {
                filteredTerminals = terminals.filter(t => {
                    if (t.status !== 'stopped') return false;
                    const daysStopped = Math.floor((new Date() - t.stoppedDate) / (1000 * 60 * 60 * 24));
                    return daysStopped >= 3;
                });
            }

            if (filteredTerminals.length === 0) {
                container.innerHTML = '<div class="no-terminals">No terminals match the current filter.</div>';
                return;
            }

            // Sort by date (newest first)
            filteredTerminals.sort((a, b) => b.stoppedDate - a.stoppedDate);

            container.innerHTML = filteredTerminals.map(terminal => {
                const stoppedDate = terminal.stoppedDate.toLocaleDateString();
                const stoppedTime = terminal.stoppedDate.toLocaleTimeString();
                const daysStopped = Math.floor((new Date() - terminal.stoppedDate) / (1000 * 60 * 60 * 24));
                
                let resolvedInfo = '';
                if (terminal.status === 'resolved') {
                    const resolvedDate = terminal.resolvedDate.toLocaleDateString();
                    const resolvedTime = terminal.resolvedDate.toLocaleTimeString();
                    resolvedInfo = `
                        <div class="info-item">
                            <div class="info-label">Resolved Date</div>
                            <div class="info-value">${resolvedDate} at ${resolvedTime}</div>
                        </div>
                    `;
                }

                return `
                    <div class="terminal-card">
                        <div class="terminal-header">
                            <div class="terminal-ip">${terminal.ip}</div>
                            <div class="terminal-status status-${terminal.status}">
                                ${terminal.status === 'stopped' ? 'STOPPED' : 'RESOLVED'}
                            </div>
                        </div>
                        
                        <div class="terminal-info">
                            <div class="info-item">
                                <div class="info-label">Stopped Date</div>
                                <div class="info-value">${stoppedDate} at ${stoppedTime}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Days Stopped</div>
                                <div class="info-value">${daysStopped} day${daysStopped !== 1 ? 's' : ''}</div>
                            </div>
                            ${terminal.location ? `
                                <div class="info-item">
                                    <div class="info-label">Location</div>
                                    <div class="info-value">${terminal.location}</div>
                                </div>
                            ` : ''}
                            ${resolvedInfo}
                        </div>

                        <div class="terminal-problem">
                            <div class="problem-label">Problem Description:</div>
                            <div class="problem-text">${terminal.problem}</div>
                        </div>

                        <div class="terminal-actions">
                            ${terminal.status === 'stopped' ? `
                                <button class="btn btn-success btn-sm" onclick="resolveTerminal(${terminal.id})">
                                    Mark as Resolved
                                </button>
                            ` : ''}
                            <button class="btn btn-danger btn-sm" onclick="deleteTerminal(${terminal.id})">
                                Delete Record
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function updateStats() {
            const total = terminals.length;
            const stopped = terminals.filter(t => t.status === 'stopped').length;
            const resolved = terminals.filter(t => t.status === 'resolved').length;
            const overdue = terminals.filter(t => {
                if (t.status !== 'stopped') return false;
                const daysStopped = Math.floor((new Date() - t.stoppedDate) / (1000 * 60 * 60 * 24));
                return daysStopped >= 3;
            }).length;

            document.getElementById('totalTerminals').textContent = total;
            document.getElementById('stoppedTerminals').textContent = stopped;
            document.getElementById('resolvedTerminals').textContent = resolved;
            document.getElementById('overdueTerminals').textContent = overdue;
        }

        function clearForm() {
            document.getElementById('terminalIp').value = '';
            document.getElementById('terminalLocation').value = '';
            document.getElementById('problemDescription').value = '';
        }

        function showMessage(text, type) {
            const messageDiv = document.getElementById('message');
            messageDiv.innerHTML = `<div class="${type}">${text}</div>`;
            setTimeout(() => {
                messageDiv.innerHTML = '';
            }, 5000);
        }

        // Auto-save every 30 seconds (backup)
        setInterval(() => {
            if (terminals.length > 0) {
                saveTerminals();
            }
        }, 30000);
    </script>
</body>
</html>
